#!/bin/bash
#
# Argument parsing via Argbash. See: http://argbash.readthedocs.io/ for more.
#
# ARG_OPTIONAL_SINGLE([skip],[s],[Skip writing a file into the \$HOME directory (e.g., --skip gitconfig)])
# ARG_HELP([Install all the dotfiles in the user's \$HOME directory.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='sh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_skip=


print_help()
{
	printf '%s\n' "Install all the dotfiles in the user's \$HOME directory."
	printf 'Usage: %s [-s|--skip <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-s, --skip: Skip writing a file into the \$HOME directory (e.g., --skip gitconfig) (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--skip)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_skip="$2"
				shift
				;;
			--skip=*)
				_arg_skip="${_key##--skip=}"
				;;
			-s*)
				_arg_skip="${_key##-s}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


MANIFEST=(gitconfig gvimrc.after rvmrc vimrc.after tigrc p10k.zsh zprofile zshenv zshrc aliases)

if [[ -n "${_arg_skip}" ]]
then
	echo "Value of --skip: $_arg_skip"
	MANIFEST=("${MANIFEST[@]/$_arg_skip}")
	echo "Removed: ${MANIFEST[@]}"
fi

function existing {
	local array=("$@")
	for file in "${array[@]}"
	do
		if [[ -z ${file} ]]
		then
			continue
		fi
		echo "Checking $HOME/.$file"
		if [[ "$HOME/.$file" -ef "$PWD/$file" ]]
		then
			echo "$HOME/.$file already has the correct symlink."
		elif [[ -f "$HOME/.$file" ]]
		then
			echo "$HOME/.$file is a regular file"
			echo "Renaming $HOME/.$file to $HOME/.$file.orig"
			mv "$HOME/.$file" "$HOME/.$file.orig"
			link "$file"
		else
			echo "$HOME/.$file does not exist"
			link "$file"
		fi
	done
}

function link {
	echo "Linking $HOME/.$file"
	ln -s "$PWD/$file" "$HOME/.$file"
}

function clean {
	local array=("$@")
	for file in "${array[@]}"
	do
		echo "Removing $HOME/.$file"
		rm -f "$HOME/.$file"
	done
}

existing "${MANIFEST[@]}"
# clean "${MANIFEST[@]}"

# ] <-- needed because of Argbash
