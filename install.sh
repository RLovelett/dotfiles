#!/bin/bash
#
# Argument parsing via Argbash. See: http://argbash.readthedocs.io/ for more.
#
# ARG_OPTIONAL_SINGLE([skip],[s],[Skip writing a file into the \$HOME directory (e.g., --skip gitconfig)])
# ARG_OPTIONAL_BOOLEAN([dry-run],[d],[Print the steps that would be taken without actually performing them.])
# ARG_OPTIONAL_BOOLEAN([debug],[],[Debug mode, increase verbosity further.])
# ARG_OPTIONAL_BOOLEAN([install-dotfiles],[i],[Install the dotfiles into the \$HOME directory.])
# ARG_OPTIONAL_BOOLEAN([uninstall-dotfiles],[u],[Remove the managed dotfiles from the \$HOME directory.])
# ARG_HELP([Install all the dotfiles in the user's \$HOME directory.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='sdiuh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_skip=
_arg_dry_run="off"
_arg_debug="off"
_arg_install_dotfiles="off"
_arg_uninstall_dotfiles="off"


print_help()
{
	printf '%s\n' "Install all the dotfiles in the user's \$HOME directory."
	printf 'Usage: %s [-s|--skip <arg>] [-d|--(no-)dry-run] [--(no-)debug] [-i|--(no-)install-dotfiles] [-u|--(no-)uninstall-dotfiles] [-h|--help]\n' "$0"
	printf '\t%s\n' "-s, --skip: Skip writing a file into the \$HOME directory (e.g., --skip gitconfig) (no default)"
	printf '\t%s\n' "-d, --dry-run, --no-dry-run: Print the steps that would be taken without actually performing them. (off by default)"
	printf '\t%s\n' "--debug, --no-debug: Debug mode, increase verbosity further. (off by default)"
	printf '\t%s\n' "-i, --install-dotfiles, --no-install-dotfiles: Install the dotfiles into the \$HOME directory. (off by default)"
	printf '\t%s\n' "-u, --uninstall-dotfiles, --no-uninstall-dotfiles: Remove the managed dotfiles from the \$HOME directory. (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--skip)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_skip="$2"
				shift
				;;
			--skip=*)
				_arg_skip="${_key##--skip=}"
				;;
			-s*)
				_arg_skip="${_key##-s}"
				;;
			-d|--no-dry-run|--dry-run)
				_arg_dry_run="on"
				test "${1:0:5}" = "--no-" && _arg_dry_run="off"
				;;
			-d*)
				_arg_dry_run="on"
				_next="${_key##-d}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			--no-debug|--debug)
				_arg_debug="on"
				test "${1:0:5}" = "--no-" && _arg_debug="off"
				;;
			-i|--no-install-dotfiles|--install-dotfiles)
				_arg_install_dotfiles="on"
				test "${1:0:5}" = "--no-" && _arg_install_dotfiles="off"
				;;
			-i*)
				_arg_install_dotfiles="on"
				_next="${_key##-i}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-i" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-u|--no-uninstall-dotfiles|--uninstall-dotfiles)
				_arg_uninstall_dotfiles="on"
				test "${1:0:5}" = "--no-" && _arg_uninstall_dotfiles="off"
				;;
			-u*)
				_arg_uninstall_dotfiles="on"
				_next="${_key##-u}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-u" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

shopt -s extglob
set -euo pipefail

MANIFEST=(gitconfig gvimrc.after rvmrc vimrc.after tigrc p10k.zsh zprofile zshenv zshrc aliases)

function is_dry_run {
	[ "$_arg_dry_run" = "on" ]
}

function existing {
	local array=("$@")
	for file in "${array[@]}"
	do
		if [[ -z ${file} ]]
		then
			continue
		fi
		echo "Checking $HOME/.$file"
		if [[ "$HOME/.$file" -ef "$PWD/$file" ]]
		then
			echo "$HOME/.$file already has the correct symlink."
		elif [[ -f "$HOME/.$file" ]]
		then
			echo "$HOME/.$file is a regular file"
			echo "Renaming $HOME/.$file to $HOME/.$file.orig"
			if ! is_dry_run; then mv "$HOME/.$file" "$HOME/.$file.orig"; fi
			link "$file"
		else
			echo "$HOME/.$file does not exist"
			link "$file"
		fi
	done
}

function link {
	echo "Linking $HOME/.$file"
	if ! is_dry_run; then ln -s "$PWD/$file" "$HOME/.$file"; fi
}

function clean {
	local array=("$@")
	for file in "${array[@]}"
	do
		echo "Removing $HOME/.$file"
		if ! is_dry_run; then rm -f "$HOME/.$file"; fi
	done
}

#If debug, print timestamps and every command run
if [[ ${_arg_debug} == "on" ]]; then
	set -xT
	set -o functrace
	PS4='+\t '
fi

if [[ ${_arg_install_dotfiles} == "on" ]]; then
	if is_dry_run
	then
		echo "NOTE: No file system changes will occur."
	fi

	if [[ -n "${_arg_skip}" ]]
	then
		echo "Value of --skip: $_arg_skip"
		MANIFEST=("${MANIFEST[@]/$_arg_skip}")
		echo "Removed: ${MANIFEST[@]}"
	fi

	existing "${MANIFEST[@]}"
fi

if [[ ${_arg_uninstall_dotfiles} == "on" ]]; then
	if is_dry_run
	then
		echo "NOTE: No file system changes will occur."
	fi

	if [[ -n "${_arg_skip}" ]]
	then
		echo "Value of --skip: $_arg_skip"
		MANIFEST=("${MANIFEST[@]/$_arg_skip}")
		echo "Removed: ${MANIFEST[@]}"
	fi

	clean "${MANIFEST[@]}"
fi

# ] <-- needed because of Argbash
